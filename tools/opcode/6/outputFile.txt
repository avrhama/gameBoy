void CPU::RRCA(uint8_t* none, uint8_t* none2) {
	uint8_t A = *getA();
	uint8_t bitLeaving = 1 & A;
	*getA() = (bitLeaving << 7) | (A >> 1);
	bitLeaving ? //setFlag('C') : resetFlag('C');

	bitLeaving ? flagsArray[C] = 1 : flagsArray[C] = 0;

	//resetFlag('N');

	flagsArray[N] = 0;
	//resetFlag('H');

	flagsArray[H] = 0;
	//resetFlag('Z');

	flagsArray[Z] = 0;
	/*if (*getA() == 0)
		//setFlag('Z');

		flagsArray[Z] = 1;
	else
		//resetFlag('Z');*/

		flagsArray[Z] = 0;*/


		//AF &= 0xfff0;
}
void CPU::RRA(uint8_t* none, uint8_t* none2) {
	uint8_t A = *getA();
	uint8_t bitLeaving = 1 & A;
	*getA() = (getFlag('C') << 7) | (A >> 1);
	bitLeaving ? //setFlag('C') : resetFlag('C');

	bitLeaving ? flagsArray[C] = 1 : flagsArray[C] = 0;

	/*if (*getA() == 0)
		//setFlag('Z');

		flagsArray[Z] = 1;
	else
		//resetFlag('Z');*/

		flagsArray[Z] = 0;*/
	//resetFlag('Z');

	flagsArray[Z] = 0;
	//resetFlag('N');

	flagsArray[N] = 0;
	//resetFlag('H');

	flagsArray[H] = 0;

	//AF &= 0xfff0;
}
void CPU::RLC_n(uint8_t* n, uint8_t* none) {
	uint8_t bitLeaving = (1 & (*n >> 7));
	*n = (*n << 1) | bitLeaving;
	bitLeaving ? //setFlag('C') : resetFlag('C');

	bitLeaving ? flagsArray[C] = 1 : flagsArray[C] = 0;

	//resetFlag('N');

	flagsArray[N] = 0;
	//resetFlag('H');

	flagsArray[H] = 0;
	if (*n == 0)
		//setFlag('Z');

		flagsArray[Z] = 1;
	else
		//resetFlag('Z');

		flagsArray[Z] = 0;

	/*if(n==getA())
		AF &= 0xfff0;*/
}
void CPU::RLC_$HL(uint8_t* none1, uint8_t* none2) {
	uint8_t n = bus->mmu->read(HL);
	uint8_t bitLeaving = (1 & (n >> 7));
	n = (n << 1) | bitLeaving;
	bus->mmu->write(HL, n);
	bitLeaving ? //setFlag('C') : resetFlag('C');

	bitLeaving ? flagsArray[C] = 1 : flagsArray[C] = 0;
	if (n == 0)
		//setFlag('Z');

		flagsArray[Z] = 1;
	else
		//resetFlag('Z');

		flagsArray[Z] = 0;
	//resetFlag('N');

	flagsArray[N] = 0;
	//resetFlag('H');

	flagsArray[H] = 0;
}
void CPU::RL_n(uint8_t* n, uint8_t* none) {
	uint8_t bitLeaving = (1 & (*n >> 7));
	*n = (*n << 1) | getFlag('C');
	bitLeaving ? //setFlag('C') : resetFlag('C');

	bitLeaving ? flagsArray[C] = 1 : flagsArray[C] = 0;

	//resetFlag('N');

	flagsArray[N] = 0;
	//resetFlag('H');

	flagsArray[H] = 0;
	if (*n == 0)
		//setFlag('Z');

		flagsArray[Z] = 1;
	else
		//resetFlag('Z');

		flagsArray[Z] = 0;


	/*if (n == getA())
		AF &= 0xfff0;*/
}
void CPU::RL_$HL(uint8_t* none1, uint8_t* none2) {
	uint8_t n = bus->mmu->read(HL);
	uint8_t bitLeaving = (1 & (n >> 7));
	n = (n << 1) | getFlag('C');
	bus->mmu->write(HL, n);
	bitLeaving ? //setFlag('C') : resetFlag('C');

	bitLeaving ? flagsArray[C] = 1 : flagsArray[C] = 0;

	//resetFlag('N');

	flagsArray[N] = 0;
	//resetFlag('H');

	flagsArray[H] = 0;
	if (n == 0)
		//setFlag('Z');

		flagsArray[Z] = 1;
	else
		//resetFlag('Z');

		flagsArray[Z] = 0;

}
void CPU::RRC_n(uint8_t* n, uint8_t* none) {
	uint8_t bitLeaving = 1 & *n;
	*n = (bitLeaving << 7) | (*n >> 1);
	bitLeaving ? //setFlag('C') : resetFlag('C');

	bitLeaving ? flagsArray[C] = 1 : flagsArray[C] = 0;

	//resetFlag('N');

	flagsArray[N] = 0;
	//resetFlag('H');

	flagsArray[H] = 0;
	if (*n == 0)
		//setFlag('Z');

		flagsArray[Z] = 1;
	else
		//resetFlag('Z');

		flagsArray[Z] = 0;


	/*if (n == getA())
		AF &= 0xfff0;*/
}
void CPU::RRC_$HL(uint8_t* none1, uint8_t* none2) {
	uint8_t n = bus->mmu->read(HL);
	uint8_t bitLeaving = 1 & n;
	n = (bitLeaving << 7) | (n >> 1);
	bus->mmu->write(HL, n);
	bitLeaving ? //setFlag('C') : resetFlag('C');

	bitLeaving ? flagsArray[C] = 1 : flagsArray[C] = 0;
	if (n == 0)
		//setFlag('Z');

		flagsArray[Z] = 1;
	else
		//resetFlag('Z');

		flagsArray[Z] = 0;
	//resetFlag('N');

	flagsArray[N] = 0;
	//resetFlag('H');
	flagsArray[H] = 0;
updateFlags();